/*
 * Copyright (c) 2021 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define NAV 1
#define OTH 2
#define OSH 3
#define SYM 4
#define MED 5
#define FUN 6

#define COMBO(NAME, BINDINGS, KEYPOS, MS, LAYERS) \
  combo_##NAME { \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    timeout-ms = <MS>; \
    layers = <LAYERS>; \
  };

#define MACRU(NAME, LABEL, B2, WAIT, TAP) \
        m_##NAME: ##NAME {  \
            label = ##LABEL; \
            compatible = "zmk,behavior-macro"; \
            #binding-cells = <0>; \
            wait-ms = <WAIT>; \
            tap-ms = <TAP>; \
            bindings \
                = <&macro_press   &kp LALT> \
		, <B2> \
                , <&macro_release &kp LALT>; \
   };
   
&lt {
    flavor = "tap-preferred";
    tapping_term_ms = <250>;
};

/ {
    combos {
        compatible = "zmk,combos";
	
/*              34-KEY POSITIONS

  ╭────────────────────╮ ╭────────────────────╮
  │  0   1   2   3   4 │ │  5   6   7   8   9 │
  │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
  │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
  ╰───────────╮ 30  31 │ │ 32  33 ╭───────────╯
              ╰────────╯ ╰────────╯            */
	
	COMBO(um, &kp RBKT, 25 26, 30, 0)
	COMBO(nj, &nj, 23 24, 30, 0)
	COMBO(ac, &kp EQUAL, 15 16, 30, 0)
	COMBO(tab, &kp TAB, 26 27, 30, 0)
	COMBO(enter, &kp ENTER, 27 28, 30, 0 1)
	COMBO(enter1, &kp ENTER, 21 22, 30, 0 1)
 	COMBO(tog, &tog 1, 30 31, 30, 0 1)
        COMBO(lwin, &kp LGUI, 11 21, 30, 0)  
        COMBO(lalt, &kp LALT, 12 22, 30, 0)
	COMBO(ralt, &kp LALT, 17 27, 30, 0)
     	COMBO(rwin, &kp RGUI, 18 28, 30, 0)
 	COMBO(pl, &m_pl, 5 6, 30, 0)
	COMBO(q, &kp Q, 7 8, 30, 4)
 	COMBO(x1, &kp X, 7 17, 60, 0)
	COMBO(z1, &kp Z, 5 15, 60, 0)
	COMBO(q1, &kp Q, 8 18, 60, 0)	
	COMBO(at, &at, 13 14, 30, 0)
	COMBO(elipp, &m_elipp, 6 16, 80, 0)
        COMBO(ndash, &ndash, 2 12, 100, 0)
	
	 };        

    behaviors {
            cit: cit_sp {
            compatible = "zmk,behavior-mod-morph";
            label = "cit sp";
            #binding-cells = <0>;
            bindings = <&kp LS(N2)>, <&kp LS(MINUS)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
              apo: apo_ud {
            compatible = "zmk,behavior-mod-morph";
            label = "apo ud";
            #binding-cells = <0>;
            bindings = <&lt FUN BSLH>, <&kp LS(N1)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };  
    
        qe: comma_pipe {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_PIPE";
            #binding-cells = <0>;
            bindings = <&td LS(N1) LS(N2)>, <&kp LS(MINUS)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
	
	nj: nino_nino {
            compatible = "zmk,behavior-mod-morph";
            label = "nino nino";
            #binding-cells = <0>;
            bindings = <&kp RA(RBKT)>, <&kp N4>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        
	at: at {
            compatible = "zmk,behavior-mod-morph";
            label = "at";
            #binding-cells = <0>;
            bindings = <&kp RA(N2)>, <&kp LS(N6)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
	
         hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            tapping_term_ms = <250>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
           hmc: homerow_modsc {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow modsc";
            #binding-cells = <2>;
            tapping_term_ms = <250>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
	   td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
	   td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LS(N2)>, <&qe>;
        };
	    macros {
        ZMK_MACRO(ndash,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&macro_tap &kp SPACE>
                 , <&macro_press   &kp LALT>
                 , <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N5 &kp KP_N0>
		 , <&macro_release &kp LALT>
		 , <&macro_tap &kp SPACE>
                 ;
    )
        ZMK_MACRO(wh,
        wait-ms = <10>;
        tap-ms = <10>;
        bindings = <&macro_tap &kp W >
                 , <&macro_release &kp LSHFT>
                 , <&macro_tap &kp H>
                 ;
    )
    
        ZMK_MACRO(elip,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&macro_press   &kp LALT>
                 , <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N3 &kp KP_N3>
                 , <&macro_release &kp LALT>
		 ;
    ) 
    
    MACRU(elipp, "elipp", &macro_tap &kp KP_N0 &kp KP_N1 &kp KP_N3 &kp KP_N3, 20, 20)
    MACRU(pl, "pl", &macro_tap &kp KP_N0 &kp KP_N1 &kp KP_N4 &kp KP_N2, 20, 20)
    };

    };


   


    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Base";
            bindings = <
                &kp LBKT   &kp O      &kp U      &kp B         &lt MED DOT   &kp F &kp H          &kp L      &kp V             &kp P 
                &kp I    &kp A      &kp E      &hmc LSHIFT S &kp W        &kp K &hmc LSHIFT D  &kp N      &kp T             &kp G 
                &kp Y  &kp SQT   &kp SEMI    &hmc LCTRL C  &kp COMMA    &none   &hmc LCTRL M   &kp ENTER  &kp J             &cit
                                                &lt OTH SLASH &hmc LSHIFT SPC       &lt NAV R   &apo     
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
                &kp SLASH  &kp N6     &kp N5      &kp N4          &kp LS(BSLH)             &none           &kp BSPC    &kp UARW   &kp DEL  &kp PG_UP
                &kp N3  &kp N2     &kp N1      &kp N0          &kp LS(N7)                  &none           &kp LARW    &kp DARW   &kp RARW &kp PG_DN
                &kp MINUS &kp N9   &kp N8  &hmc LCTRL N7   &kp LS(N0)                      &none           &kp TAB     &kp ENTER  &kp END  &kp PG_DN
                                        &hmc RALT COMMA   &lt SYM LC(BSPC)                 &trans           &trans
            >;
        };

        other_layer {
            label = "Other";
            bindings = <
                &kp ESC	   &trans     &trans      &kp LC(R)          &trans       &trans           &trans         &trans       &trans       &bt BT_CLR
                &kp LC(A)     &kp LS(LG(S))     &trans      &kp LC(F)          &trans       &trans           &trans         &trans       &trans       &trans
                &kp LC(Z)  &kp LC(X)     &kp LC(C)     &kp LC(V)          &trans       &bt BT_SEL 0     &bt BT_SEL 1   &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4
                                                  &trans          &trans       &trans           &trans
            >;
        };

        osh_layer {
            label = "Oneshot";
            bindings = <
                &kp LBKT   &kp N7     &kp N8      &kp N9          &kp RBKT      &trans          &trans         &trans      &trans     &trans
                &kp N0     &kp N4     &kp N5      &kp N6          &kp EQUAL     &trans          &trans         &trans      &trans     &trans
                &kp GRAVE  &kp N1     &kp N2      &kp N3          &kp BSLH      &trans          &wh         &trans      &trans     &trans
                                                  &kp N0          &kp MINUS     &trans          &trans 
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
                &kp RA(N7)     &kp RA(N0)  &kp LS(N5)  &kp LS(N3) &kp RA(M)                     &kp RA(N4)   &kp KP_N4   &kp KP_N5    &kp KP_N6  &trans
                &kp RA(N8)    &kp RA(N9)  &kp LS(N8)  &kp LS(N9) &kp RA(NON_US_BSLH)           &kp RA(N5)   &kp KP_N0   &kp KP_N1    &kp KP_N2  &kp KP_N3
                &kp NON_US_BSLH    &kp LS(NON_US_BSLH)  &kp LS(GRAVE)  &kp GRAVE &kp RA(EQUAL)   &kp RA(N3)   &kp KP_N7   &kp KP_N8    &kp KP_N9  &trans
                                                   &kp DOT &trans         &trans &kp LALT
            >;
        };

        media_layer {
            label = "Media";
            bindings = <
                &trans	   &kp C_PREV &kp C_VOL_UP &kp C_PP       &none        &trans           &trans         &trans       &trans       &trans
                &trans     &kp C_NEXT &kp C_VOL_DN &kp C_STOP     &trans       &trans           &kp C_PREV     &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT
                &trans     &trans     &trans      &trans          &trans       &trans           &trans         &trans       &trans       &trans
                                                  &kp LA(TAB)     &kp LC(TAB)  &kp C_STOP       &kp C_PLAY_PAUSE
            >;
        };

        fun_layer {
            label = "Fun";
            bindings = <
                &kp F12     &kp F7     &kp F8      &kp F9     &kp PSCRN         &trans          &trans         &trans      &trans     &trans
                &kp F11     &kp F4     &kp F5      &kp F6     &kp SLCK          &trans          &trans         &trans      &trans     &trans
                &kp F10     &kp F1     &kp F2      &kp F3     &kp PAUSE_BREAK   &trans          &trans         &trans      &trans     &trans
                                                   &none      &trans            &trans          &trans
            >;
        };
    };
};
