/*
 * Copyright (c) 2021 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define NAV 1
#define OTH 2
#define RRR 3
#define SYM 4
#define MED 5
#define FUN 6

&sk {
    quick-release;
};

#define COMBO(NAME, BINDINGS, KEYPOS, MS, LAYERS) \
  combo_##NAME { \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    timeout-ms = <MS>; \
    layers = <LAYERS>; \
  };

#define MACRU(NAME, LABEL, B2, WAIT, TAP) \
        m_##NAME: ##NAME {  \
            label = ##LABEL; \
            compatible = "zmk,behavior-macro"; \
            #binding-cells = <0>; \
            wait-ms = <WAIT>; \
            tap-ms = <TAP>; \
            bindings \
                = <&macro_press   &kp LALT> \
		, <B2> \
                , <&macro_release &kp LALT>; \
   };
   
&lt {
    flavor = "tap-preferred";
    tapping_term_ms = <250>;
};

/ {
    combos {
        compatible = "zmk,combos";
	
/*              34-KEY POSITIONS

  ╭────────────────────╮ ╭────────────────────╮
  │  0   1   2   3   4 │ │  5   6   7   8   9 │
  │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
  │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
  ╰───────────╮ 30  31 │ │ 32  33 ╭───────────╯
              ╰────────╯ ╰────────╯            */
	
	COMBO(um, &kp RBKT, 25 26, 30, 0)
	COMBO(nj, &nj, 23 24, 30, 0)
	COMBO(ac, &kp EQUAL, 15 16, 30, 6)
	COMBO(apo, &apo, 1 11, 120, 6)
	COMBO(tab, &kp TAB, 2 12, 30, 0)
	COMBO(x, &kp X, 3 13, 80, 0)
	COMBO(semiK, &kp LS(COMMA), 4 14, 30, 6)
	COMBO(Kolon, &kp LS(DOT), 5 15, 30, 6)
	COMBO(z, &kp Z, 6 16, 80, 0 1)
	COMBO(enter, &kp ENTER, 7 17, 30, 0 1)
	COMBO(enter1, &kp ENTER, 2 12, 30, 1)
	COMBO(q, &kp Q, 8 18, 80, 0)
	COMBO(xxx, &to 3, 9 19, 30, 6)
	COMBO(tog, &tog 1, 30 31, 30, 0 1)
        COMBO(lwin, &kp LGUI, 11 21, 30, 6)  
        COMBO(lalt, &kp LALT, 12 22, 30, 6)
	COMBO(rctrl, &sk RCTRL, 17 27, 30, 0)
     	COMBO(rwin, &kp RGUI, 18 28, 30, 6)
	COMBO(Lpara, &kp LS(N8), 4 14, 30, 0)
 	COMBO(Rpara, &kp LS(N9), 5 15, 30, 0)
	COMBO(thorn, &m_thorn, 7 8, 30, 6)
	COMBO(ss, &m_ss, 6 7, 30, 6)
	COMBO(at, &at, 13 14, 30, 0)
	COMBO(elip, &m_elip, 6 16, 80, 6)
        COMBO(uni, &uni, 32 33, 60, 0)
	
	
	 };        

    behaviors {
          cit: cit_rp {
            compatible = "zmk,behavior-mod-morph";
            label = "cit rp";
            #binding-cells = <0>;
            bindings = <&hmc LGUI LS(N2)>, <&kp BSLH>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
          apo: apo_ud {
            compatible = "zmk,behavior-mod-morph";
            label = "apo ud";
            #binding-cells = <0>;
            bindings = <&kp BSLH>, <&kp RA(N8)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };  
    
          qe: qe {
            compatible = "zmk,behavior-mod-morph";
            label = "qe";
            #binding-cells = <0>;
            bindings = <&hm LCTRL LS(MINUS)>, <&kp LS(N1)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
	
	  nj: nino_nino {
            compatible = "zmk,behavior-mod-morph";
            label = "nino nino";
            #binding-cells = <0>;
            bindings = <&kp RA(RBKT)>, <&kp LS(N4)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        
	at: at {
            compatible = "zmk,behavior-mod-morph";
            label = "at";
            #binding-cells = <0>;
            bindings = <&kp RA(N2)>, <&kp LS(N6)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
	
         hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            tapping_term_ms = <250>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
           hmc: homerow_modsc {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow modsc";
            #binding-cells = <2>;
            tapping_term_ms = <250>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
	   td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
	   td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LS(N2)>, <&qe>;
        };
	    macros {

        ZMK_MACRO(wh,
        wait-ms = <10>;
        tap-ms = <10>;
        bindings = <&macro_tap &kp W >
                 , <&macro_release &kp LSHFT>
                 , <&macro_tap &kp H>
                 ;
    )
        ZMK_MACRO(uni,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings = <&macro_press &mo 3 &kp LALT>
                 , <&macro_pause_for_release>
                 , <&macro_release &mo 3 &kp LALT>;
    
    )
    
    MACRU(ndash, "ndash", &macro_tap &kp KP_N0 &kp KP_N1 &kp KP_N5 &kp KP_N0, 20, 20)
    MACRU(mdash, "mdash", &macro_tap &kp KP_N0 &kp KP_N1 &kp KP_N5 &kp KP_N1, 20, 20)
    MACRU(elip, "elip", &macro_tap &kp KP_N0 &kp KP_N1 &kp KP_N3 &kp KP_N3, 20, 20)
    MACRU(tm, "tm", &macro_tap &kp KP_N0 &kp KP_N1 &kp KP_N5 &kp KP_N3, 20, 20)
    MACRU(eth, "eth", &macro_tap &kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N0, 20, 20)
    MACRU(thorn, "thorn", &macro_tap &kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N4, 20, 20)
    MACRU(ss, "ss", &macro_tap &kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N3, 20, 20)
    
    };

    };


   


    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Base";
            bindings = <
                &kp SQT  &kp O    &kp U   &kp F         &lt MED Z        &hmc LGUI SLASH  &kp H         &kp L  &kp V  &kp C
                &kp I    &kp A    &kp E   &hm LSHIFT S  &sl FUN          &kp M            &hm LSHIFT D  &kp N  &kp T  &kp G
                &kp SEMI &kp LBKT &kp Y   &hmc LCTRL B  &hmc LALT X      &lt FUN BSLH     &hmc LCTRL K  &kp J  &kp P  &sk LSHIFT
                                          &lt OTH Q     &kp SPC          &lt RRR R        &lt NAV W
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
                &kp SLASH &kp N6 &kp N5 &kp N4         &kp LS(BSLH)             &none      &kp BSPC    &kp UARW   &kp DEL  &kp PG_UP
                &kp N3    &kp N2 &kp N1 &hmc LSHIFT N0 &kp LS(N7)               &none      &kp LARW    &kp DARW   &kp RARW &kp PG_DN
                &kp MINUS &kp N9 &kp N8 &hmc LCTRL N7  &kp LS(N0)               &none      &none       &none      &kp HOME &kp END
                                        &kp COMMA      &lt SYM LC(BSPC)         &trans     &trans
            >;
        };

        other_layer {
            label = "Other";
            bindings = <
                &kp ESC	      &trans    &trans    &kp LC(R) &kp RA(N4)      &kp RA(M)           &kp RA(N8) &kp RA(N9) &kp LS(N5)      &kp LS(N3)            
                &kp LS(LG(S)) &kp LC(A) &trans    &kp LC(F) &kp RA(N5)      &kp RA(NON_US_BSLH) &kp LS(N8) &kp LS(N9) &kp NON_US_BSLH &kp LS(NON_US_BSLH)   
                &kp LC(Z)     &kp LC(X) &kp LC(C) &kp LC(V) &kp RA(N3)      &kp RA(EQUAL)       &kp RA(N7) &kp RA(N0) &kp GRAVE       &kp LS(GRAVE)    
                                                  &trans          &trans       &trans           &trans
            >;
        };

        r_layer {
            label = "R";
            bindings = <
                &trans &trans   &trans     &trans        &kp LC(Z)      &trans           &trans          &trans  &trans  &trans
                &trans   &trans   &trans    &trans &trans            &trans &trans   &trans     &trans        &trans
                &trans    &trans &trans  &trans  &trans               &trans &trans       &trans        &trans &kp CAPS
                                           &kp LC(BSPC)       &kp BSPC           &trans        &trans
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
                &kp RA(N7)     &kp RA(N0)  &kp LS(N5)  &kp LS(N3) &kp RA(M)                     &kp RA(N4)   &kp KP_N4   &kp KP_N5    &kp KP_N6  &trans
                &kp RA(N8)    &kp RA(N9)  &kp LS(N8)  &kp LS(N9) &kp RA(NON_US_BSLH)           &kp RA(N5)   &kp KP_N0   &kp KP_N1    &kp KP_N2  &kp KP_N3
                &kp NON_US_BSLH    &kp LS(NON_US_BSLH)  &kp LS(GRAVE)  &kp GRAVE &kp RA(EQUAL)   &kp RA(N3)   &kp KP_N7   &kp KP_N8    &kp KP_N9  &trans
                                                   &kp DOT &trans         &trans &kp LALT
            >;
        };

        media_layer {
            label = "Media";
            bindings = <
                &trans	      &kp C_PREV    &kp C_VOL_UP &kp C_PP        &none             &kp PSCRN          &kp F5  &kp F6   &kp F7   &kp F8
                &trans        &kp C_NEXT    &kp C_VOL_DN &kp &kp LA(TAB) &bt BT_CLR        &kp SLCK           &kp F1  &kp F2   &kp F3   &kp F4
                &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2 &bt BT_SEL 3    &bt BT_SEL 4      &kp PAUSE_BREAK    &kp F9  &kp F10  &kp F11  &kp F12
                                                  &kp LA(TAB)     &kp LC(TAB)  &trans       &trans
            >;
        };

        fun_layer {
            label = "OneShot";
            bindings = <
                &kp RA(RBKT) &kp LS(RBKT)   &kp RBKT      &trans     &trans        &trans          &trans     &kp ENTER     &kp TAB     &kp LS(N1)
                &trans       &kp LS(EQUAL)  &kp EQUAL     &trans     &trans        &trans          &kp LS(N2) &kp COMMA     &kp DOT     &kp LS(MINUS)
                &none        &trans         &trans        &trans     &trans        &trans          &trans     &kp LS(COMMA) &kp LS(DOT) &trans
                                                   &trans      &trans                &trans          &trans
            >;
        };
    };
};
